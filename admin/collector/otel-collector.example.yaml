# OpenTelemetry Collector Configuration for Diamond District
# This is an example configuration with comments explaining each section
# Copy to /opt/otel-collector/config.yaml and customize as needed

# Receivers: Define how to receive telemetry data
receivers:
  # OTLP receiver for traces and metrics from the application
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "https://watch.zerotodiamond.com"
            - "http://localhost:3000"

  # Host metrics receiver (optional - for system monitoring)
  # hostmetrics:
  #   collection_interval: 10s
  #   scrapers:
  #     cpu:
  #     memory:
  #     disk:
  #     network:

# Processors: Transform telemetry data before exporting
processors:
  # Batch processor to optimize network usage
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource detection to add host metadata
  resource:
    attributes:
      - key: service.namespace
        value: video-platform
        action: upsert
      - key: deployment.environment
        value: production
        action: upsert
      - key: host.name
        value: watch.zerotodiamond.com
        action: upsert

  # Tail sampling (disabled by default - enable for production)
  # tail_sampling:
  #   decision_wait: 10s
  #   num_traces: 100
  #   expected_new_traces_per_sec: 10
  #   policies:
  #     # Always sample errors
  #     - name: errors
  #       type: status_code
  #       status_code: {status_codes: [ERROR]}
  #     # Sample 10% of traces
  #     - name: randomized
  #       type: probabilistic
  #       probabilistic: {sampling_percentage: 10}
  #     # Always sample slow requests (>1s)
  #     - name: slow
  #       type: latency
  #       latency: {threshold_ms: 1000}

  # Attributes processor to remove sensitive data
  attributes:
    actions:
      - key: http.request.header.authorization
        action: delete
      - key: http.request.header.cookie
        action: delete
      - key: db.statement
        action: delete
      - key: http.url
        action: hash

  # Filter processor to drop noisy spans
  filter:
    traces:
      span:
        - 'attributes["http.target"] == "/health"'
        - 'attributes["http.target"] == "/api/health"'
        - 'attributes["http.target"] == "/_next/static/*"'

# Exporters: Send telemetry data to backends
exporters:
  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 20

  # File exporter for local storage
  file:
    path: /var/log/otel-collector/traces.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 5
      localtime: true
    format: json

  # OTLP exporter to send to Jaeger/Tempo
  # otlp/tempo:
  #   endpoint: tempo:4317
  #   tls:
  #     insecure: true
  #   retry_on_failure:
  #     enabled: true
  #     initial_interval: 5s
  #     max_interval: 30s
  #     max_elapsed_time: 300s

  # Prometheus exporter for metrics
  # prometheus:
  #   endpoint: "0.0.0.0:8889"
  #   namespace: diamond_district
  #   const_labels:
  #     service: "diamond-district"

  # Jaeger exporter (alternative to OTLP)
  # jaeger:
  #   endpoint: jaeger:14250
  #   tls:
  #     insecure: true

# Extensions: Additional capabilities
extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

# Service: Configure pipelines and telemetry
service:
  # Extensions to enable
  extensions: [health_check, pprof, zpages]

  # Telemetry settings for the collector itself
  telemetry:
    logs:
      level: info
      initial_fields:
        service: "otel-collector"
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  # Pipelines: Connect receivers → processors → exporters
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes, filter]
      exporters: [debug, file]
      # For production, add: [otlp/tempo] or [jaeger]

    # Metrics pipeline
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [debug, file]
      # For production, add: [prometheus]

    # Logs pipeline (if needed)
    # logs:
    #   receivers: [otlp]
    #   processors: [memory_limiter, batch]
    #   exporters: [debug, file]
