generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model courses {
  id          String    @id @default(cuid())
  title       String
  description String?
  slug        String    @unique
  thumbnail   String?   // URL to course thumbnail image
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  modules     modules[] // Changed from lessons to modules
}

// New table for modules (was lessons at course level)
model modules {
  id          String        @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courses     courses       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sub_lessons sub_lessons[] // Has many sub-lessons

  @@index([courseId, order])
}

// Renamed from lessons to sub_lessons (the actual video content)
model sub_lessons {
  id                  String                @id @default(cuid())
  title               String
  description         String?
  videoUrl            String
  duration            Int?
  order               Int
  moduleId            String                // Changed from courseId to moduleId
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  thumbnailUrl        String?
  muxPlaybackId       String?
  muxAssetId          String?
  muxPolicy           String?               @default("public") // "public" or "signed"
  muxReadyAt          DateTime?
  muxError            String?
  modules             modules               @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  playback_heartbeats playback_heartbeats[]
  progress            progress[]

  @@index([moduleId, order])
}

model playback_heartbeats {
  id              String      @id @default(cuid())
  userId          String
  subLessonId     String      // Changed from lessonId
  positionSeconds Int
  deviceId        String?
  timestamp       DateTime    @default(now())
  sub_lessons     sub_lessons @relation(fields: [subLessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([timestamp])
  @@index([userId, subLessonId])
}

model progress {
  id              String      @id @default(cuid())
  userId          String
  subLessonId     String      // Changed from lessonId
  completed       Boolean     @default(false)
  watchTime       Int         @default(0)
  lastWatched     DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  notes           String?
  positionSeconds Int?        @default(0)
  durationSeconds Int?        @default(0)
  deviceId        String?
  lastHeartbeat   DateTime?
  playbackState   String?     @default("stopped")
  playbackSpeed   Float?      @default(1.0)
  sub_lessons     sub_lessons @relation(fields: [subLessonId], references: [id], onDelete: Cascade)
  users           users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subLessonId])
  @@index([lastWatched])
  @@index([userId])
}

model sessions {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                  String                @id @default(cuid())
  email               String                @unique
  password            String?
  firstName           String?
  lastName            String?
  phone               String?
  emailVerified       DateTime?
  image               String?
  role                Role                  @default(USER)
  ghlContactId        String?
  ghlTags             String[]              @default([])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  accounts            accounts[]
  playback_heartbeats playback_heartbeats[]
  progress            progress[]
  sessions            sessions[]
  dp_progress         dp_progress[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model podcasts {
  id            String    @id @default(cuid())
  title         String
  description   String?
  muxPlaybackId String?
  muxAssetId    String?
  duration      Int?      // Duration in seconds
  transcript    String?   // Full transcript text
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([published, publishedAt])
}

enum Role {
  USER
  ADMIN
}

// Diamond Plus Content Management Tables
enum ContentType {
  workshop
  podcast
  module
  coaching
}

model dp_content {
  id           String       @id @default(uuid())
  title        String
  description  String?
  type         ContentType
  category     String?
  thumbnail_url String?
  order_index  Int         @default(0)
  is_published Boolean     @default(false)
  metadata     Json        @default("{}")
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  created_by   String?
  dp_videos    dp_videos[]
  dp_podcasts  dp_podcasts[]
  dp_progress  dp_progress[]
  
  @@index([type])
  @@index([category])
  @@index([is_published])
}

model dp_videos {
  id              String       @id @default(uuid())
  content_id      String
  title           String
  description     String?
  video_url       String?
  thumbnail_url   String?
  duration        Int?
  order_index     Int         @default(0)
  mux_playback_id String?
  mux_asset_id    String?
  mux_policy      String      @default("public")
  mux_ready_at    DateTime?
  mux_error       String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  dp_content      dp_content  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  dp_progress     dp_progress[]
  
  @@index([content_id])
}

model dp_podcasts {
  id              String       @id @default(uuid())
  content_id      String
  title           String
  description     String?
  episode_number  Int?
  audio_url       String?
  thumbnail_url   String?
  duration        Int?
  mux_playback_id String?
  mux_asset_id    String?
  mux_ready_at    DateTime?
  published_at    DateTime?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  dp_content      dp_content  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  dp_progress     dp_progress[]
  
  @@index([content_id])
}

model dp_progress {
  id               String      @id @default(uuid())
  user_id          String
  content_id       String
  video_id         String?
  podcast_id       String?
  completed        Boolean     @default(false)
  progress_seconds Int         @default(0)
  total_seconds    Int?
  last_watched_at  DateTime    @default(now())
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  users            users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  dp_content       dp_content  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  dp_videos        dp_videos?  @relation(fields: [video_id], references: [id], onDelete: Cascade)
  dp_podcasts      dp_podcasts? @relation(fields: [podcast_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, video_id])
  @@unique([user_id, podcast_id])
  @@index([user_id])
}

model welcome_course_videos {
  id              String    @id @default(uuid())
  title           String
  description     String?
  mux_playback_id String?
  mux_asset_id    String?
  video_url       String?
  thumbnail_url   String?
  duration        Int?      // Duration in seconds
  order           Int       @default(0)
  published       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model group_calls {
  id              String    @id @default(uuid())
  title           String
  description     String?
  call_date       DateTime
  mux_playback_id String?
  mux_asset_id    String?
  video_url       String?
  thumbnail_url   String?
  duration        Int?      // Duration in seconds
  published       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model script_videos {
  id              String    @id @default(uuid())
  title           String
  description     String?
  mux_playback_id String?
  mux_asset_id    String?
  vimeo_id        String?   // For existing Vimeo videos
  video_url       String?
  thumbnail_url   String?
  duration        Int?      // Duration in seconds
  order           Int       @default(0)
  published       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}
